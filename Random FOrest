from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Split the data into independent variables (X) and dependent variable (y)
X = result_df.iloc[:, :-1]  # Independent variables (all columns except the last one)
y = result_df.iloc[:, -1]   # Dependent variable (last column)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Random Forest Classifier model
model = RandomForestClassifier()

# Train the model
model.fit(X_train, y_train)

# Predict the labels for the test set
y_pred = model.predict(X_test)

# Calculate the accuracy of the model
accuracy = accuracy_score(y_test, y_pred)
print('Accuracy:', accuracy)













from sklearn.preprocessing import OneHotEncoder

# Perform one-hot encoding on the categorical columns
categorical_columns = ['column1.3', 'column1.4', 'column2.3', 'column2.4']
encoder = OneHotEncoder(sparse=False, handle_unknown='ignore')
X_encoded = encoder.fit_transform(result_df[categorical_columns])

# Create the updated feature matrix including the encoded categorical columns
X_updated = pd.concat([result_df.drop(categorical_columns, axis=1), pd.DataFrame(X_encoded)], axis=1)

# Split the updated data into independent variables (X) and dependent variable (y)
X = X_updated.iloc[:, :-1]  # Independent variables (all columns except the last one)
y = X_updated.iloc[:, -1]   # Dependent variable (last column)

# Split the updated data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Continue with the rest of the code for model training and evaluation
