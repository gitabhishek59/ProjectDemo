import pandas as pd
from difflib import SequenceMatcher
from datetime import datetime, timedelta

# Create transaction_df (Transaction DataFrame) with manually assigned values
transaction_data = {
    'Source_Amount': [1000, 2000, 1500, 3000, 1800],
    'transaction_type_cd': ['A', 'B', 'A', 'C', 'B'],
    'Supplier_name': ['Supplier1', 'Supplier2', 'Supplier3', 'Supplier4', 'Supplier5'],
    'purchase_Identification': ['Purchase1', 'Purchase2', 'Purchase3', 'Purchase4', 'Purchase5'],
    'Date': ['2023-05-25', '2023-05-26', '2023-05-27', '2023-05-28', '2023-05-29']
}
transaction_df = pd.DataFrame(transaction_data)

# Create invoice_df (Invoice DataFrame) with manually assigned values
invoice_data = {
    'inv_transaction_amount': [1050, 2000, 1550, 3000, 1700],
    'inv_debit_credit_cd': ['D', 'C', 'D', 'C', 'D'],
    'invoice_unmatch_inv_id': ['Invoice1', 'Invoice2', 'Invoice3', 'Invoice4', 'Invoice5'],
    'inv_ticket_no': ['Ticket1', 'Ticket2', 'Ticket3', 'Ticket4', 'Ticket5'],
    'Date': ['2023-05-20', '2023-05-26', '2023-05-24', '2023-05-28', '2023-05-30']
}
invoice_df = pd.DataFrame(invoice_data)

# Threshold dictionary for column-wise matching
thresholds = {
    'Source_Amount': 1.0,
    'transaction_type_cd': 1.0,
    'Supplier_name': 1.0,
    'purchase_Identification': 1.0,
    'Date': 1.0
}

# List to store matching details
matches = []

# Iterate through each row in transaction_df
for index, transaction_row in transaction_df.iterrows():
    best_match_score = 0
    best_match_index = None
    best_match_columns = {}
    
    # Iterate through each row in invoice_df
    for inv_index, invoice_row in invoice_df.iterrows():
        matching_score = 0
        matching_columns = {}
        
        # Calculate the similarity score for each column and apply the threshold
        for col1 in transaction_df.columns:
            for col2 in invoice_df.columns:
                similarity_ratio = SequenceMatcher(None, str(transaction_row[col1]), str(invoice_row[col2])).ratio()
                
                # Apply the threshold for specific columns in df1
                if col1 in thresholds and similarity_ratio >= thresholds[col1]:
                    if col1 == 'Date':
                        date1 = datetime.strptime(transaction_row[col1], '%Y-%m-%d')
                        date2 = datetime.strptime(invoice_row[col2], '%Y-%m-%d')
                        date_diff = abs((date1 - date2).days)
                        if date_diff <= 5:
                            matching_score += similarity_ratio
                            matching_columns[col1] = (col2, similarity_ratio)
                    else:
                        matching_score += similarity_ratio
                        matching_columns[col1] = (col2, similarity_ratio)
        
        # Check if the matching invoice meets the conditions
        if matching_score > best_match_score and matching_columns.get('Source_Amount') and matching_columns.get('transaction_type_cd') and (matching_columns.get('Supplier_name') or matching_columns.get('purchase_Identification')):
            best_match_score = matching_score
            best_match_index = inv_index
            best_match_columns = matching_columns
    
    # Append the matching details to the list
    match = {
        'df1_index': index,
        'df2_index': best_match_index if best_match_index is not None else 'No Index',
        'matching_score': best_match_score,
        'matching_columns': best_match_columns
    }
    matches.append(match)

# Create a DataFrame from the matches list
result_df = pd.DataFrame(matches)

# Save the result DataFrame to a CSV file
result_df.to_csv('matching_details.csv', index=False)
